service: origami-webhooks

frameworkVersion: ">=1.26.1"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, 'eu-west-1'}
  role: arn:aws:iam::${self:custom.secret.AWS_ACCOUNT_ID}:role/ApplicationRoleFor_${self:service}
  timeout: 30
  deploymentBucket:
    name: ${self:service}-artefacts-${self:provider.region} # Deployment bucket name. Default is generated by the framework
  stackTags:
    systemCode: ${self:service}
    teamDL: origami.support@ft.com
    environment: ${self:custom.tags.${self:provider.stage}.environment}
  environment:
    AWS_ACCESS_ID: ${self:custom.secret.AWS_ACCESS_KEY_ID}
    AWS_SECRET: ${self:custom.secret.AWS_SECRET_ACCESS_KEY}
    GITHUB_WEBHOOK_SECRET: ${self:custom.secret.GITHUB_WEBHOOK_SECRET}
    SLACK_WEBHOOK_URL: ${self:custom.secret.SLACK_WEBHOOK_URL}

custom:
  defaultStage: dev
  tags:
    dev:
      environment: t
    prod:
      environment: p
  secret: ${file(./env.js)}

plugins:
  - serverless-offline

resources:
  Resources:
    S3IssuesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-issues
    S3IssuesPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: "S3IssuesBucket"
        PolicyDocument:
          Id: S3IssuesPolicy
          Statement:
            - Sid: AllowOnlyApplicationToPutObject
              Effect: Allow
              Principal:
                AWS:
                - ${self:provider.role}
              Action: s3:PutObject
              Resource:
              - arn:aws:s3:::${self:resources.Resources.S3IssuesBucket.Properties.BucketName}/*
            - Sid: AllowOnlyApplicationToGetObject
              Effect: Allow
              Principal:
                AWS:
                - ${self:provider.role}
              Action: s3:GetObject
              Resource:
              - arn:aws:s3:::${self:resources.Resources.S3IssuesBucket.Properties.BucketName}/*

functions:
  webhooks:
    handler: handler.webhooks
    events:
      - http:
          path: webhooks
          method: post
          cors: true
  save:
    handler: functions/save-to-s3.handler
    environment:
      BUCKET: ${self:resources.Resources.S3IssuesBucket.Properties.BucketName}
    events:
      - http:
          path: save
          method: post
          cors: true
  cron:
    handler: functions/cron.handler
    events:
      # - schedule: rate(1 minute)
      - schedule: cron(30 9 * * MON-FRI *)
